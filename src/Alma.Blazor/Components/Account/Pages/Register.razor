@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Alma.Blazor.Entities

@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<AlmaUser> UserManager
@inject IUserStore<AlmaUser> UserStore
@inject SignInManager<AlmaUser> SignInManager
@inject IEmailSender<AlmaUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Registrar</PageTitle>

<MudGrid Justify="Justify.Center">
    <MudItem xs="12" md="4" lg="4" xl="3">
        <MudPaper Elevation="8" Class="d-flex flex-column align-center justify-center mud-width-full py-8 px-8 rounded-lg">
            <MudStack>

                <MudItem>
                    <MudText Typo="Typo.h4" Class="mb-8" Align="Align.Center">Alma - Registrar</MudText>
                </MudItem>

                <MudItem>

                    <StatusMessage Message="@Message" />

                    <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
                        <DataAnnotationsValidator />

                        <MudText Typo="Typo.body1" GutterBottom="true">Crie uma nova conta.</MudText>

                        <MudGrid>
                            <MudItem md="12">
                                <MudStaticTextField For="@(() => Input.Email)" @bind-Value="Input.Email"
                                                    Label="Email" Placeholder="nome@exemplo.com"
                                                    UserAttributes="@(new() { { "autocomplete", "true" }, { "aria-required", "true" } } )" />
                            </MudItem>
                            <MudItem md="12">
                                <MudStaticTextField For="@(() => Input.Password)" @bind-Value="Input.Password"
                                                    Label="Senha" InputType="InputType.Password" Placeholder="senha"
                                                    UserAttributes="@(new() { { "autocomplete", "new-password" }, { "aria-required", "true" } } )" />
                            </MudItem>
                            <MudItem md="12">
                                <MudStaticTextField For="@(() => Input.ConfirmPassword)" @bind-Value="Input.ConfirmPassword"
                                                    Label="Confirmação da senha" InputType="InputType.Password" Placeholder="confirmação da senha"
                                                    UserAttributes="@(new() { { "autocomplete", "new-password" }, { "aria-required", "true" } } )" />
                            </MudItem>
                            <MudItem md="12" Class="d-flex flex-row justify-end">
                                <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FormAction="FormAction.Submit">Registrar</MudStaticButton>
                            </MudItem>
                        </MudGrid>
                    </EditForm>
                </MudItem>

            </MudStack>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {



    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private AlmaUser CreateUser()
    {
        try
        {
            var user = Activator.CreateInstance<AlmaUser>();

            user.EmailConfirmed = true;

            return user;
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(AlmaUser)}'. " +
                $"Ensure that '{nameof(AlmaUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<AlmaUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<AlmaUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
