@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Alma.Blazor.Entities

@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity

@inject SignInManager<AlmaUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Entrar</PageTitle>

<MudGrid Justify="Justify.Center">
    <MudItem xs="12" md="4" lg="4" xl="3">
        <MudPaper Elevation="8" Class="d-flex flex-column align-center justify-center mud-width-full py-8 px-8 rounded-lg">
            <MudStack>
                <MudItem>
                    <MudText Typo="Typo.h4" Class="mb-8" Align="Align.Center">Alma</MudText>
                </MudItem>
                <MudItem>
                    <StatusMessage Message="@errorMessage" />
                    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                        <DataAnnotationsValidator />

                        <MudGrid>
                            <MudItem md="12">
                                <MudStaticTextField 
                                    For="@(() => Input.Email)" 
                                    @bind-Value="Input.Email"

                                    Label="Email" Placeholder="nome@exemplo.com"
                                    UserAttributes="@(new() { { "autocomplete", "true" }, { "aria-required", "true" } } )" />
                            </MudItem>
                            <MudItem md="12">
                                <MudStaticTextField For="@(() => Input.Password)" @bind-Value="Input.Password"
                                                    Label="Senha" InputType="InputType.Password" Placeholder="senha"
                                                    UserAttributes="@(new() { { "autocomplete", "current-password" }, { "aria-required", "true" } } )" />
                                
                                </MudItem>
                            @* <MudItem md="12">
                                <MudStaticCheckBox For="@(() => Input.RememberMe)" @bind-Value="Input.RememberMe">Remember me</MudStaticCheckBox>
                            </MudItem> *@
                            <MudItem md="12">
                                <MudStack Row="true" Justify="Justify.FlexEnd">
                                    <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FormAction="FormAction.Submit">Entrar</MudStaticButton>
                                </MudStack>
                                @* <MudStack Row="true" Justify="Justify.FlexEnd">
                                    <MudLink Href="Account/ForgotPassword" Style="color: var(--mud-palette-gray-default) !important;">Esqueci minha senha</MudLink>
                                </MudStack> *@
                            </MudItem>
                        </MudGrid>
                    </EditForm>

                    <MudGrid Class="mt-4">
                        <MudItem md="12" Class="d-flex justify-center">
                            <MudLink Href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Registrar</MudLink><br />
                        </MudItem>
                    </MudGrid>
                </MudItem>
            </MudStack>
        </MudPaper>
    </MudItem>
</MudGrid>



@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        var user = await SignInManager.UserManager.FindByEmailAsync(Input.Email);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
