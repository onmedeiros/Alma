@using Alma.Flows.Core.Abstractions
@using Alma.Flows.Core.Activities.Abstractions
@using Alma.Flows.Core.Activities.Attributes
@using Alma.Flows.Core.Activities.Models
@using Alma.Flows.Core.Description.Descriptors
@using Alma.Flows.Definitions
@using Alma.Flows.Design.Utils
@using Alma.Flows.Extensions
@using EnumsNET;
@using Microsoft.Extensions.DependencyInjection
@using MudBlazor

@inject IServiceScopeFactory ScopeFactory;

@if (_options is null || !_options.Any())
{
    <MudProgressCircular Indeterminate="true" Size="Size.Small" Class="m-2" />
    return;
}
else
{
    <MudSelect Label="@Parameter.DisplayName"
               Value="@_value"
               ValueChanged="@((string e) => HandleValueChanged(e))"
               Variant="Variant.Outlined" Margin="Margin.Dense"
               Class="mb-1"
               Style="width: max-content; min-width: 250px;">
        @foreach (var item in _options)
        {
            <MudSelectItem Value="@item.Value">@item.DisplayName</MudSelectItem>
        }
    </MudSelect>
}

@code {
    [Parameter]
    public IParameterizableDefinition Parameterizable { get; set; } = null!;

    [Parameter]
    public string? Discriminator { get; set; }

    [Parameter]
    public ParameterDescriptor Parameter { get; set; } = null!;

    [Parameter]
    public EventCallback<ParameterDefinition> ParameterChanged { get; set; }

    [Parameter]
    public bool Disabled { get; set; }


    private IEnumerable<ParameterOption> _options { get; set; } = [];
    private string? _value;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!Parameter.TryGetAttribute<ActivityParameterProviderAttribute>(out var parameterProviderAttribute))
                throw new Exception($"Parameter '{Parameter.Name}' does not have ActivityParameterProviderAttribute");

            var scope = ScopeFactory.CreateScope();
            var provider = scope.ServiceProvider.GetKeyedService<IParameterProvider>(parameterProviderAttribute.ProviderType);

            if (provider is null)
                throw new Exception($"No provider with type '{parameterProviderAttribute.ProviderType}' registered for parameter '{Parameter.Name}'");

            _options = await provider.LoadOptionsAsync(string.Empty, Discriminator);
            _value = Parameterizable.GetParameterValue(Parameter.Name);

            StateHasChanged();
        }
    }

    private async Task HandleValueChanged(string value)
    {
        Parameterizable.SetParameterValue(Parameter, value);

        var definition = Parameterizable.GetParameterDefinition(Parameter.Name);

        _value = value;
        await ParameterChanged.InvokeAsync(definition);
    }
}
