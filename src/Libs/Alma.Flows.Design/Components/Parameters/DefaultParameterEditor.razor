@using Alma.Flows.Core.Abstractions
@using Alma.Flows.Core.Activities.Attributes
@using Alma.Flows.Core.Activities.Models
@using Alma.Flows.Core.Description.Descriptors
@using Alma.Flows.Definitions
@using Alma.Flows.Extensions
@using Alma.Flows.Models.Activities
@using Microsoft.AspNetCore.Components.Forms

@inherits ParameterEditor

<MudBlazor.MudStack Class="gap-2">
    @if (ParameterizableDescriptor.Parameters.Count() > 0)
    {
        @foreach (var parameter in ParameterizableDescriptor.Parameters)
        {
            if (IsHidden(parameter))
                continue;

            if (parameter.Type == typeof(bool))
            {
                <BoolParameter Parameterizable="ParameterizableDefinition" Parameter="parameter" ParameterChanged="ParameterChanged" Disabled="IsDisabled(parameter)" />
            }
            else if (parameter.ContainsAttribute(typeof(ActivityParameterProviderAttribute)) && parameter.Type.IsAssignableTo(typeof(ParameterOption)))
            {
                <OptionsParameter Parameterizable="ParameterizableDefinition" Parameter="parameter" ParameterChanged="ParameterChanged" Disabled="IsDisabled(parameter)" />
            }
            else if (parameter.Type.IsAssignableTo(typeof(Enum)))
            {
                <EnumParameter Parameterizable="ParameterizableDefinition" Parameter="parameter" ParameterChanged="ParameterChanged" Disabled="IsDisabled(parameter)" />
            }
            else if (parameter.Type == typeof(Dictionary<string, string>))
            {
                <DictionaryParameter Parameterizable="ParameterizableDefinition" Parameter="parameter" ParameterChanged="ParameterChanged" Disabled="IsDisabled(parameter)" />
            }
            else if (parameter.Type == typeof(ICollection<FormField>))
            {
                <FormFieldCollectionParameter Parameterizable="ParameterizableDefinition" Parameter="parameter" ParameterChanged="ParameterChanged" Disabled="IsDisabled(parameter)" />
            }
            else
            {
                <TextParameter Parameterizable="ParameterizableDefinition" Parameter="parameter" ParameterChanged="ParameterChanged" Disabled="IsDisabled(parameter)" />
            }
        }
    }
</MudBlazor.MudStack>

@code {
    private bool IsDisabled(ParameterDescriptor descriptor)
    {
        var parameterAttribute = descriptor.Attributes.FirstOrDefault(x => x is ActivityParameterAttribute) as ActivityParameterAttribute;

        if (parameterAttribute is null)
            return false;

        if (parameterAttribute.DisabledCondition.Length == 0)
            return false;

        foreach (var condition in parameterAttribute.DisabledCondition)
        {
            var conditionValue = ParameterizableDefinition.GetParameterValue(condition);

            if (string.IsNullOrEmpty(conditionValue))
                continue;

            if (conditionValue.ToLower() == "true")
                return true;
        }

        return false;
    }

    private bool IsHidden(ParameterDescriptor descriptor)
    {
        var parameterAttribute = descriptor.Attributes.FirstOrDefault(x => x is ActivityParameterAttribute) as ActivityParameterAttribute;

        if (parameterAttribute is null)
            return false;

        if (parameterAttribute.HiddenCondition.Length == 0)
            return false;

        foreach (var condition in parameterAttribute.HiddenCondition)
        {
            var conditionValue = ParameterizableDefinition.GetParameterValue(condition);

            if (string.IsNullOrEmpty(conditionValue))
                continue;

            if (conditionValue.ToLower() == "true")
                return true;
        }

        return false;
    }
}
