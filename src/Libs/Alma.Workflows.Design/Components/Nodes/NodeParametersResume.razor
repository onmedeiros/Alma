@using Alma.Workflows.Core.Activities.Attributes
@using Alma.Workflows.Core.Description.Descriptors
@using Alma.Workflows.Design.Components.Nodes.Parameters
@using Alma.Workflows.Extensions
@using MudBlazor
@using Alma.Core.Extensions

<CascadingValue Value="Node">
    <MudBlazor.MudStack Style="gap: 0;">
        @if (Node.ActivityDescriptor.Parameters.Count > 0)
        {
            @foreach (var parameter in Node.ActivityDescriptor.Parameters)
            {
                if (IsHidden(parameter) || string.IsNullOrEmpty(parameter.DisplayValue))
                    continue;

                <MudText 
                    Typo="Typo.body2" 
                    Class="mud-text-secondary" 
                    Style="max-width:200px; overflow: hidden">
                    @if (parameter.DisplayValue.Length > 33)
                    {
                        @((MarkupString)parameter.DisplayValue.ReplaceTemplate("value", Node.GetParameterValue(parameter.Name)).Substring(0, 30))<text>...</text>
                    }
                    else
                    {
                        @((MarkupString)parameter.DisplayValue.ReplaceTemplate("value", Node.GetParameterValue(parameter.Name)))
                    }
                </MudText>
            }
        }
    </MudBlazor.MudStack>
    
</CascadingValue>

@code {
    [Parameter]
    public ActivityNodeModel Node { get; set; } = null!;

    private bool IsHidden(ParameterDescriptor descriptor)
    {
        var parameterAttribute = descriptor.Attributes.FirstOrDefault(x => x is ActivityParameterAttribute) as ActivityParameterAttribute;

        if (parameterAttribute is null)
            return false;

        if (parameterAttribute.HiddenCondition.Length == 0)
            return false;

        foreach (var condition in parameterAttribute.HiddenCondition)
        {
            var conditionValue = Node.GetParameterValue(condition);

            if (string.IsNullOrEmpty(conditionValue))
                continue;

            if (conditionValue.ToLower() == "true")
                return true;
        }

        return false;
    }
}
