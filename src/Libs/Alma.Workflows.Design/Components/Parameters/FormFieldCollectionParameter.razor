@using Alma.Workflows.Core.Abstractions
@using Alma.Workflows.Core.Description.Descriptors
@using Alma.Workflows.Definitions
@using Alma.Workflows.Design.Components.Shared
@using Alma.Workflows.Models.Activities
@using Microsoft.AspNetCore.Components.Forms
@using MudBlazor
@using System.Text.Json

@inject IDialogService DialogService;

@if (_value is not null)
{
    <MudStack Spacing="0" Class="border border-solid mud-border-lines-default rounded">
        <MudText Typo="Typo.body2" Class="ms-4 mt-2"><b>@Parameter.DisplayName</b></MudText>

        <MudTable @ref="_table" Items="_value" Elevation="0" Class="mud-width-full" Dense>

            <HeaderContent>
                <MudTh Style="width: 100px">Nome</MudTh>
                <MudTh Style="width: 120px">Rótulo</MudTh>
                <MudTh Style="width: 100px">Tipo</MudTh>
                <MudTh></MudTh>
            </HeaderContent>

            <RowTemplate>
                <MudTd>@context.Name</MudTd>
                <MudTd Class="overflow-auto" Style="max-width: 100px;">@context.Label</MudTd>
                <MudTd Class="overflow-auto" Style="max-width: 100px;">@context.Type.ToString()</MudTd>
                <MudTd>
                    <div class="d-flex flex-row justify-end">
                        <MudTooltip Text="Editar" Arrow>
                            <MudIconButton OnClick="@(() => HandleEditValue(context))" Icon="@Icons.Material.Outlined.Edit" Size="MudBlazor.Size.Small" />
                        </MudTooltip>

                        <MudTooltip Text="Remover" Color="Color.Error" Arrow>
                            <MudIconButton OnClick="@(() => HandleRemoveValue(context))" Icon="@Icons.Material.Outlined.Delete" Size="MudBlazor.Size.Small" Color="Color.Error" />
                        </MudTooltip>
                    </div>
                </MudTd>
            </RowTemplate>

            <NoRecordsContent>
                <MudText Typo="Typo.body2" Class="mud-text-secondary mt-4">Lista vazia.</MudText>
            </NoRecordsContent>
        </MudTable>

        <MudButton OnClick="HandleAddValue" Class="mt-4 mb-2 mx-2" Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.Add" Size="Size.Small" DropShadow="false">Adicionar item</MudButton>

    </MudStack>
}

@code {
    [Parameter]
    public IParameterizableDefinition Parameterizable { get; set; } = null!;

    [Parameter]
    public ParameterDescriptor Parameter { get; set; } = null!;

    [Parameter]
    public EventCallback<ParameterDefinition> ParameterChanged { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    private MudTable<FormField> _table = default!;
    private ICollection<FormField> _value = default!;
    private FormField? _editingField;

    protected override void OnInitialized()
    {
        var stringValue = Parameterizable.GetParameterValue(Parameter.Name);

        if (!string.IsNullOrEmpty(stringValue))
        {
            _value = JsonSerializer.Deserialize<ICollection<FormField>>(stringValue)
                ?? [];
        }
        else
        {
            _value = [];
        }
    }

    private async Task HandleAddValue()
    {
        var parameters = new DialogParameters<FormFieldEditorDialog>
        {
            {x => x.Field, new FormField{ Name = string.Empty } }
        };

        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
        };

        var dialog = await DialogService.ShowAsync<FormFieldEditorDialog>("Adicionar campo", parameters, options);
        var result = await dialog.Result;

        if (result is not null && result.Data is FormField field)
        {
            _value.Add(field);
            await UpdateValue();
        }
    }

    private async Task HandleEditValue(FormField field)
    {
        var editingField = new FormField
        {
            Name = field.Name,
            Label = field.Label,
            Type = field.Type,
            Placeholder = field.Placeholder,
            Required = field.Required
        };

        var parameters = new DialogParameters<FormFieldEditorDialog>
        {
            {x => x.Field, editingField}
        };

        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
        };

        var dialog = await DialogService.ShowAsync<FormFieldEditorDialog>("Editar campo", parameters, options);
        var result = await dialog.Result;

        if (result is not null && result.Data is FormField updatedField)
        {
            field.Name = updatedField.Name;
            field.Label = updatedField.Label;
            field.Type = updatedField.Type;
            field.Placeholder = updatedField.Placeholder;
            field.Required = updatedField.Required;

            await UpdateValue();
        }
    }

    private Task HandleRemoveValue(FormField field)
    {
        _value.Remove(field);
        return UpdateValue();
    }

    private Task UpdateValue()
    {
        var stringValue = JsonSerializer.Serialize(_value);

        Parameterizable.SetParameterValue(Parameter, stringValue);

        var definition = Parameterizable.GetParameterDefinition(Parameter.Name);

        StateHasChanged();

        return ParameterChanged.InvokeAsync(definition);
    }

}
