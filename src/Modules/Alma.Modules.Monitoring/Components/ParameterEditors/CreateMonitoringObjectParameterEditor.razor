@using Alma.Workflows.Design.Components.Parameters
@using Alma.Workflows.Monitoring.Activities
@using Alma.Workflows.Monitoring.MonitoringObjectSchemas.Entities
@using Alma.Workflows.Monitoring.MonitoringObjectSchemas.Models
@using Alma.Workflows.Monitoring.MonitoringObjectSchemas.Services
@using Microsoft.Extensions.DependencyInjection
@using MudBlazor
@inherits ParameterEditor

@inject IServiceScopeFactory ScopeFactory;

<MudStack Class="gap-2">
	<!-- MonitoringObjectScheme -->
	@{
		var monitoringObjectSchemeParameter = GetParameter(nameof(CreateMonitoringObjectActivity.MonitoringObjectSchema));
	}

	<MudAutocomplete T="MonitoringObjectSchema"
					 SearchFunc="SearchMonitoringObjectSchemas"
					 ToStringFunc="@(x => x?.Name ?? null)"
					 Label="@monitoringObjectSchemeParameter.DisplayName"
					 Value="@_monitoringObjectSchemeValue"
					 ValueChanged="HandleMonitoringObjectSchemaChanged"
					 Variant="Variant.Outlined"
					 Margin="Margin.Dense"
					 Style="width: 100%; min-width: 250px;" />

	<!-- VariableName -->
	@{
		var nameParameter = GetParameter(nameof(CreateMonitoringObjectActivity.VariableName));
	}

	<TextParameter Parameterizable="ParameterizableDefinition" Parameter="nameParameter" ParameterChanged="ParameterChanged" />

	<!-- IfExists -->
	@{
		var ifExistsParameter = GetParameter(nameof(CreateMonitoringObjectActivity.IfExists));
	}

	<EnumParameter Parameterizable="ParameterizableDefinition" Parameter="ifExistsParameter" ParameterChanged="ParameterChanged" />

</MudStack>


@code {
	private MonitoringObjectSchema? _monitoringObjectSchemeValue = null;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			var selectedMonitoringObjectSchemaValue = GetValue(nameof(CreateMonitoringObjectActivity.MonitoringObjectSchema));
			if (!string.IsNullOrEmpty(selectedMonitoringObjectSchemaValue))
			{
				using var scope = ScopeFactory.CreateScope();
				var monitoringObjectSchemaService = scope.ServiceProvider.GetRequiredService<IMonitoringObjectSchemaService>();

				_monitoringObjectSchemeValue = await monitoringObjectSchemaService.GetOneAsync(selectedMonitoringObjectSchemaValue, Discriminator);
				StateHasChanged();
			}
		}
	}

	private async Task<IEnumerable<MonitoringObjectSchema>> SearchMonitoringObjectSchemas(string value, CancellationToken c)
	{
		using var scope = ScopeFactory.CreateScope();
		var monitoringObjectSchemaService = scope.ServiceProvider.GetRequiredService<IMonitoringObjectSchemaService>();

		var schemas = await monitoringObjectSchemaService.SearchAsync(new MonitoringObjectSchemaSearchModel
		{
			PageIndex = 1,
			PageSize = 10,
			OrganizationId = Discriminator,
			Term = value
		});

		return schemas.AsEnumerable();
	}

	private async Task HandleMonitoringObjectSchemaChanged(MonitoringObjectSchema schema)
	{
		_monitoringObjectSchemeValue = schema;
		await HandleValueChanged(nameof(CreateMonitoringObjectActivity.MonitoringObjectSchema), schema.Id);
	}
}
