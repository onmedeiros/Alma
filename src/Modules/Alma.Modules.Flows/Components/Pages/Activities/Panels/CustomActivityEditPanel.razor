@using Alma.Flows.Core.CustomActivities.Entities
@using Alma.Flows.Core.CustomActivities.Models
@using Alma.Flows.Core.CustomActivities.Services
@using Microsoft.Extensions.DependencyInjection

@inject NavigationManager NavigationManager
@inject IServiceScopeFactory ScopeFactory
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@if (_model is null || _isLoading)
{
    <MudStack Row="true" Justify="Justify.Center">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </MudStack>
}
else
{
    <MudStack Class="mud-width-full">

        <FormTextData Label="Id" Value="@Id" />
        <FormTextData Label="Data de criação" Value="@_entity.CreatedAt.ToLocalTime().ToString()" />
        <FormTextData Label="Última atualização" Value="@_entity.UpdatedAt.ToLocalTime().ToString()" />

        <MudDivider Class="mb-2 flex-grow-0" />

        <EditForm Model="@_model" OnSubmit="Save">
            <FluentValidationValidator @ref="_validator" />

            <MudText Typo="Typo.body2" Class="mb-3"><b>Informações da atividade</b></MudText>

            <MudTextField @bind-Value="_model.Name" For="@(() => _model.Name)" Label="Nome" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mb-3" />

            <MudTextField @bind-Value="_model.Description" For="@(() => _model.Description)" Label="Descrição" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mb-3" Lines="3" AutoGrow />

            <MudStack Row="true" Justify="Justify.FlexEnd" Class="mt-3">
                <SubmitButton IsSaving="@_isSaving" />
            </MudStack>

        </EditForm>

    </MudStack>
}

@code {
    #region Parameters
    
    [Parameter]
    public required string Id { get; set; }

    [Parameter]
    public required string OrganizationId { get; set; }

    #endregion

    #region Private fields

    bool _isLoading = true;
    bool _isSaving = false;

    FluentValidationValidator? _validator;
    CustomActivityEditModel _model = null!;
    CustomActivityTemplate _entity = null!;

    #endregion

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Load();
        }
    }

    private async Task Load()
    {
        if (string.IsNullOrEmpty(Id))
        {
            await DialogService.ShowErrorDialog("Não foi possível carregar os dados da instância", "Parâmetro ID não informado.");
            return;
        }

        _isLoading = true;
        StateHasChanged();

        var scope = ScopeFactory.CreateScope();
        var customActivityManager = scope.ServiceProvider.GetRequiredService<ICustomActivityManager>();

        try
        {
            var customActivity = await customActivityManager.FindById(Id, OrganizationId);

            if (customActivity is null)
            {
                await DialogService.ShowErrorDialog("Não foi possível carregar os dados da atividade personalizada", "Atividade personalizada não encontrada.");
                return;
            }
            
            _entity = customActivity;

            _model = new CustomActivityEditModel
            {
                Id = _entity.Id,
                Discriminator = _entity.Discriminator,
                Name = _entity.Name,
                Description = _entity.Description
            };
        }
        catch (Exception ex)
        {

            await DialogService.ShowErrorDialog("Erro ao carregar dados da atividade personalizada.", ex.Message);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task Save()
    {
        if (_validator is null)
        {
            return;
        }

        if (!_validator.Validate())
        {
            return;
        }

        _isSaving = true;
        StateHasChanged();

        var scope = ScopeFactory.CreateScope();
        var customActivityManager = scope.ServiceProvider.GetRequiredService<ICustomActivityManager>();

        try
        {
            await customActivityManager.Update(_model);
            Snackbar.Add("Atividade personalizada atualizada com sucesso.", Severity.Success);
        }
        catch (Exception ex)
        {
            await DialogService.ShowErrorDialog("Erro ao atualizar atividade personalizada.", ex.Message);
        }
        finally
        {
            _isSaving = false;
            StateHasChanged();
        }
    }
}
