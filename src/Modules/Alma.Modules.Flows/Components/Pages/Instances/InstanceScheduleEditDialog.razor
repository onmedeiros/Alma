@using CronExpressionDescriptor
@using Alma.Core.Domain.Shared.Extensions
@using Alma.Modules.Flows.Models.Instances
@using Alma.Flows.Core.InstanceSchedules.Models
@using Alma.Flows.Core.InstanceSchedules.Services
@using Alma.Flows.Core.Instances.Entities
@using Microsoft.Extensions.DependencyInjection

@inject IDialogService DialogService;
@inject ISnackbar Snackbar;
@inject IServiceScopeFactory ScopeFactory;

<MudDialog>
    <DialogContent>
        @if (_createModel is not null)
        {
            <EditForm Model="_createModel" OnSubmit="Create">
                <FluentValidationValidator @ref="_validator" />

                <MudText Class="mb-2">Informações do agendamento:</MudText>
                <MudTextField @bind-Value="_createModel.Name" For="@(() => _createModel.Name)" Label="Nome" Class="mb-5" Variant="Variant.Outlined" Margin="Margin.Dense" />

                <SubmitButton IsSaving="_isSaving" Class="mb-2" />
            </EditForm>
        }
        else if (_editModel is not null)
        {
            <EditForm Model="_editModel" OnSubmit="Save">
                <FluentValidationValidator @ref="_validator" />

                <MudText Class="mb-2">Informações do agendamento:</MudText>

                <MudTextField @bind-Value="_editModel.Name" For="@(() => _editModel.Name)" Label="Nome" Class="mb-3" Variant="Variant.Outlined" Margin="Margin.Dense" />

                <MudTextField @bind-Value="_editModel.CronExpression" For="@(() => _editModel.CronExpression)" Label="Expressão cron" HelperText="@GetCronDescription()" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mb-3" />

                <MudSwitch @bind-Value="_editModel.IsActive" For="@(() => _editModel.IsActive)" Label="Ativo" Class="mb-3" />

                <SubmitButton IsSaving="_isSaving" Class="mt-2 mb-2" />
            </EditForm>
        }
    </DialogContent>
</MudDialog>

@code {
    #region Parameters

    [CascadingParameter]
    public IMudDialogInstance Dialog { get; set; } = null!;

    [Parameter]
    public Organization Organization { get; set; } = null!;

    [Parameter]
    public FlowInstance Instance { get; set; } = null!;

    [Parameter]
    public string? Id { get; set; }

    #endregion

    #region Private fields

    private bool _isSaving = false;
    private bool _isLoading = false;

    private InstanceScheduleCreateModel? _createModel = null;
    private InstanceScheduleEditModel? _editModel = null;
    private FluentValidationValidator _validator = null!;

    #endregion

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (string.IsNullOrEmpty(Id))
            {
                _createModel = new InstanceScheduleCreateModel
                {
                    Name = string.Empty
                };
            }
            else
            {
                await Load();
            }


            StateHasChanged();
        }
    }

    private async Task Create()
    {
        _isSaving = true;
        StateHasChanged();

        if (!await _validator!.ValidateAsync())
        {
            await DialogService.ShowErrorDialog("Erro de validação", "Alguns campos não estão preenchidos corretamente.");

            _isSaving = false;
            StateHasChanged();

            return;
        }

        using var scope = ScopeFactory.CreateScope();
        var service = scope.ServiceProvider.GetRequiredService<IInstanceScheduleManager>();

        try
        {
            var result = await service.Create(_createModel!.Name!, Instance.Id, Instance.Discriminator);

            Snackbar.AddSuccess("Agendamento criado com sucesso.");

            _createModel = null;
            Id = result.Id;

            await Load();
        }
        catch (Exception ex)
        {
            await DialogService.ShowErrorDialog("Erro ao criar agendamento", ex.Message);
        }
        finally
        {
            _isSaving = false;
            StateHasChanged();
        }
    }

    private async Task Load()
    {
        _isLoading = true;
        StateHasChanged();

        using var scope = ScopeFactory.CreateScope();
        var service = scope.ServiceProvider.GetRequiredService<IInstanceScheduleManager>();

        var schedule = await service.FindById(Id!, Instance.Discriminator);

        if (schedule is null)
        {
            await DialogService.ShowErrorDialog("Agendamento não encontrado", "O agendamento não foi encontrado.");
            return;
        }

        _editModel = new InstanceScheduleEditModel
        {
            Id = schedule.Id,
            Discriminator = schedule.Discriminator,
            Name = schedule.Name,
            IsActive = schedule.IsActive,
            CronExpression = schedule.CronExpression
        };

        _isLoading = false;
        StateHasChanged();
    }

    private async Task Save()
    {
        _isSaving = true;
        StateHasChanged();

        if (_editModel is null || !await _validator!.ValidateAsync())
        {
            await DialogService.ShowErrorDialog("Erro de validação", "Alguns campos não estão preenchidos corretamente.");

            _isSaving = false;
            StateHasChanged();

            return;
        }

        using var scope = ScopeFactory.CreateScope();
        var service = scope.ServiceProvider.GetRequiredService<IInstanceScheduleManager>();

        try
        {
            await service.Update(_editModel);

            Snackbar.AddSuccess("Agendamento atualizado com sucesso.");
            Dialog.Close();
        }
        catch (Exception ex)
        {
            await DialogService.ShowErrorDialog("Erro ao atualizar agendamento", ex.Message);
        }
        finally
        {
            _isSaving = false;
            StateHasChanged();
        }
    }

    private string? GetCronDescription()
    {
        if (!string.IsNullOrEmpty(_editModel?.CronExpression) && _editModel.CronExpression.IsValidCronExpression())
        {
            return ExpressionDescriptor.GetDescription(_editModel.CronExpression, new Options
            {
                Locale = "pt-BR",
                Use24HourTimeFormat = true
            });
        }

        return null;
    }
}
