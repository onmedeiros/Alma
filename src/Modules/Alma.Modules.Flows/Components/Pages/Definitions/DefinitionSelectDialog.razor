@using Alma.Organizations.Contexts
@using Alma.Modules.Core.Components.Shared.Loadings
@using Alma.Flows
@using Alma.Flows.Definitions
@using Alma.Flows.Stores.Filters
@using Microsoft.Extensions.DependencyInjection

@inject IServiceScopeFactory ScopeFactory
@inject IDialogService DialogService
@inject IOrganizationContext OrganizationContext

<MudDialog>
    <DialogContent>
        <MudTextField  
        Label="Buscar" @bind-Value="_term" 
        Adornment="Adornment.End" 
        AdornmentIcon="@Icons.Material.Outlined.Search"
        OnAdornmentClick="Search" 
        DebounceInterval="800"
        OnDebounceIntervalElapsed="HandleDebounceIntervalElapsed"/>

        <MudDivider Class="mb-4"/>

        @if (_isLoading)
        {
            <LoadingCircle/>
        }
        else if (_selectedDefinition is null)
        {
            if (_result.Count == 0)
            {
                <MudText>Nenhum estabelecimento encontrado.</MudText>
            }
            else
            {
                @foreach (var definition in _result)
                {
                    <MudCard Class="mb-2">
                        <MudCardContent>
                            <div class="d-flex align-center justify-space-between">
                                <div class="d-flex flex-column">
                                    <span><strong>@definition.Name</strong></span>
                                </div>
                                <MudButton Variant="Variant.Text" OnClick="@(() => OnSelect(definition))">Selecionar</MudButton>
                            </div>
                        </MudCardContent>
                    </MudCard>
                }
            }
        }
        else if (_selectedDefinition is not null)
        {
            <MudCard Elevation="0" Class="mud-background-gray">
                <MudCardContent>
                    <FormTextData Label="Definição de fluxo de trabalho selecionada" Value="@_selectedDefinition.Name" />

                    @if (_selectedDefinitionVersions is not null && _selectedDefinitionVersions.Count > 0)
                    {
                        if (_isLoadingVersions)
                        {
                            <LoadingCircle />
                        }
                        else
                        {
                            <MudSelect @bind-Value="_selectedDefinitionVersion" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mt-2" Label="Selecione uma versão">
                                @foreach (var version in _selectedDefinitionVersions)
                                {
                                    <MudSelectItem Value="@version">
                                        @version.Name - <span class="mud-text-secondary">@version.CreatedAt.ToLocalTime()</span>
                                    </MudSelectItem>
                                }
                            </MudSelect>
                        }
                    }
                    else
                    {
                        <MudSelect @bind-Value="_selectedDefinitionVersion" HelperText="Nenhuma versão publicada." Variant="Variant.Outlined" Margin="Margin.Dense" Class="mt-2" Label="Selecione uma versão" Disabled>

                        </MudSelect>
                    }
                </MudCardContent>
            </MudCard>
        }

    </DialogContent>

    <DialogActions>
        <MudButton Variant="Variant.Text" OnClick="() => MudDialog.Close(DialogResult.Cancel())">Cancelar</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => MudDialog.Close(DialogResult.Ok(_selectedDefinitionVersion))" Disabled="@(_selectedDefinitionVersion is null)">Selecionar</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    [Parameter]
    public bool SelectVersion { get; set; }

    private bool _isLoading = false;
    private bool _isLoadingVersions = false;
    private string _term = string.Empty;
    private FlowDefinition? _selectedDefinition;
    private FlowDefinitionVersion? _selectedDefinitionVersion;

    private ICollection<FlowDefinition> _result = [];
    private ICollection<FlowDefinitionVersion> _selectedDefinitionVersions = [];

    protected override async Task OnInitializedAsync()
    {
        await MudDialog.SetTitleAsync("Selecione uma definição");
        await MudDialog.SetOptionsAsync(new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseOnEscapeKey = true,
        });

    }

    private async Task HandleDebounceIntervalElapsed(string term)
    {
        await Search();
    }

    private async Task Search()
    {
        _isLoading = true;
        _selectedDefinition = null;

        StateHasChanged();

        var scope = ScopeFactory.CreateScope();
        var flowManager = scope.ServiceProvider.GetRequiredService<IFlowManager>();
        var organizationContext = scope.ServiceProvider.GetRequiredService<IOrganizationContext>();

        try
        {
            _result = await flowManager.ListDefinitions(1, 10, new FlowDefinitionFilters
            {
                Discriminator = await organizationContext.GetCurrentOrganizationId(),
                Name = _term
            });
        }
        catch (Exception ex)
        {
            await DialogService.ShowErrorDialog("Erro ao buscar definições", ex.Message);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SearchVersions()
    {
        _isLoadingVersions = true;
        _selectedDefinitionVersion = null;

        StateHasChanged();

        var scope = ScopeFactory.CreateScope();
        var flowManager = scope.ServiceProvider.GetRequiredService<IFlowManager>();
        var organizationContext = scope.ServiceProvider.GetRequiredService<IOrganizationContext>();

        try
        {
            _selectedDefinitionVersions = await flowManager.ListDefinitionVersions(1, 20, new FlowDefinitionVersionFilters
            {
                Discriminator = await organizationContext.GetCurrentOrganizationId(),
                FlowDefinitionId = _selectedDefinition!.Id
            });
        }
        catch (Exception ex)
        {
            await DialogService.ShowErrorDialog("Erro ao buscar versões da definição", ex.Message);
        }
        finally
        {
            _isLoadingVersions = false;
            StateHasChanged();
        }
    }

    private async Task OnSelect(FlowDefinition definition)
    {
        _selectedDefinition = definition;

        await SearchVersions();
    }
}
