@page "/flows/executions"

@using Alma.Organizations.Entities
@using Alma.Modules.Flows.Components.Shared
@using Alma.Modules.Flows.Models.Executions
@using Alma.Flows
@using Alma.Flows.Core.InstanceExecutions.Entities
@using Alma.Flows.Core.InstanceExecutions.Services
@using Alma.Flows.Core.InstanceExecutions.Stores
@using Alma.Flows.Core.Instances
@using Alma.Flows.Core.Instances.Entities
@using Alma.Flows.Core.Instances.Services
@using Alma.Flows.Core.Instances.Stores
@using Alma.Flows.Stores.Filters
@using Microsoft.Extensions.DependencyInjection


@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IServiceScopeFactory ScopeFactory

<Page Title="Execuções" Subtitle="Execuções realizadas pelas instâncias ativas.">

    <Tools>
        <MudButton OnClick="CreateExecution" Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.Add" Color="Color.Primary" Class="me-2">Criar</MudButton>
    </Tools>


    <ChildContent>
        <MudDataGrid @ref="_dataGrid"
        T="ExecutionListModel"
        ServerData="LoadData"
        CurrentPage="(PageIndex ?? 1) - 1"
        RowsPerPage="PageSize ?? 10"
        Elevation="8"
        Hover="true"
        SortMode="SortMode.None">

            <ToolBarContent>
                <MudText Typo="Typo.h6">Lista de execuções</MudText>
                <MudSpacer></MudSpacer>
                <MudTextField @bind-Value="Name" Placeholder="Buscar pelo nome" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Outlined.Search" OnAdornmentClick="_dataGrid.ReloadServerData" Class="mt-0 me-2"></MudTextField>
            </ToolBarContent>

            <Columns>
                <PropertyColumn Title="Nome da instância" Property="x => x.InstanceName"/>
                <PropertyColumn Title="Criado em" Property="x => x.CreatedAt.ToLocalTime()"/>
                <PropertyColumn Title="Atualizado em" Property="x => x.UpdatedAt.ToLocalTime()"/>
                <InstanceExecutionStatusColumn Parameter="x => x.Item.Status" />

                <TemplateColumn HeaderStyle="width: 60px;">
                    <CellTemplate>
                        <MudIconButton Href="@($"/flows/executions/details/{context.Item.Id}")" Icon="@Icons.Material.Outlined.Info" Size="MudBlazor.Size.Small" />
                    </CellTemplate>
                </TemplateColumn>

            </Columns>

            <NoRecordsContent>Nenhuma instância executada para os filtros atuais.</NoRecordsContent>

            <PagerContent>
                <MudDataGridPager T="ExecutionListModel" />
            </PagerContent>
        </MudDataGrid>
    </ChildContent>
</Page>

@code {

    [CascadingParameter]
    public required Organization Organization { get; set; }

    #region Query Parameters

    [SupplyParameterFromQuery]
    public int? PageIndex { get; set; }

    [SupplyParameterFromQuery]
    public int? PageSize { get; set; }

    [SupplyParameterFromQuery]
    public string? Name { get; set; }

    #endregion

    #region private fields

    private MudDataGrid<ExecutionListModel> _dataGrid = new MudDataGrid<ExecutionListModel>();

    #endregion

    private async Task<GridData<ExecutionListModel>> LoadData(GridState<ExecutionListModel> state)
    {
        PageIndex = state.Page + 1;
        PageSize = state.PageSize;

        UpdateQueryParameters();

        using var scope = ScopeFactory.CreateScope();
        var executionManager = scope.ServiceProvider.GetRequiredService<IInstanceExecutionManager>();
        var instanceManager = scope.ServiceProvider.GetRequiredService<IInstanceManager>();

        var filters = new InstanceExecutionFilters
        {
            Discriminator = Organization.Id
        };

        var result = await executionManager.List(PageIndex ?? 1, PageSize ?? 10, filters);
        var modelList = new List<ExecutionListModel>();

        foreach (var item in result.Items)
        {
            var instanceName = await instanceManager.GetName(item.InstanceId, item.Discriminator);

            modelList.Add(new ExecutionListModel
            (
                Id: item.Id,
                InstanceId: item.InstanceId,
                DefinitionVersionId: item.DefinitionVersionId ?? string.Empty,
                CreatedAt: item.CreatedAt,
                UpdatedAt: item.UpdatedAt,
                InstanceName: instanceName,
                DefinitionVersionName: string.Empty,
                Status: item.Status
            ));
        }

        return new GridData<ExecutionListModel>
        {
            Items = modelList,
            TotalItems = result.TotalCount
        };
    }

    private void UpdateQueryParameters()
    {
        var parameters = new Dictionary<string, object?>
            {
                ["name"] = Name,
                ["pageIndex"] = PageIndex ?? 1,
                ["pageSize"] = PageSize ?? 10,
            };

        NavigationManager.NavigateTo(NavigationManager.GetUriWithQueryParameters(parameters));
    }

    private async Task CreateExecution()
    {
        var parameters = new DialogParameters<ExecuteInstanceDialog>
        {
        };

        var dialog = await DialogService.ShowAsync<ExecuteInstanceDialog>("Executar instância", parameters);
    }
}
