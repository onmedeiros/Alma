@using Alma.Modules.Core.Components.Shared.Data
@using Alma.Workflows.Core.Categories.Entities
@using Alma.Workflows.Core.Categories.Models
@using Alma.Workflows.Core.Categories.Services
@using Alma.Workflows.Core.Categories.Stores
@using Microsoft.Extensions.DependencyInjection

@inject IServiceScopeFactory ScopeFactory
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudDataGrid @ref="_dataGrid" T="Category" ServerData="Load" Elevation="0" Hover="true" Style="width: 100%;">

    <ToolBarContent>
        <MudText Typo="Typo.h6">Categorias</MudText>
        <MudSpacer></MudSpacer>
        <MudButton OnClick="CreateCategory" Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.Add" Color="Color.Primary">Criar</MudButton>
    </ToolBarContent>

    <Columns>

        <PropertyColumn Title="Nome" Property="x => x.DefaultName"/>
        <PropertyColumn Title="Criada em" Property="x => x.CreatedAt.ToLocalTime()" HeaderStyle="width: 200px;"/>
        <PropertyColumn Title="Última atualização" Property="x => x.UpdatedAt.ToLocalTime()" HeaderStyle="width: 200px;" />

        <TemplateColumn Title="Criado por" HeaderStyle="width: 200px;">
            <CellTemplate>
                @if (context.Item.IsSystemDefault)
                {
                    <MudChip Size="Size.Small">Sistema</MudChip>
                }
                else
                {
                    <MudChip Color="Color.Primary" Size="Size.Small">Usuário</MudChip>
                }
            </CellTemplate>
        </TemplateColumn>

        <TemplateColumn HeaderStyle="width: 60px;">
            <CellTemplate>
                @if (!context.Item.IsSystemDefault)
                {
                    <MudIconButton OnClick="@(() => EditCategory(context.Item))" Icon="@Icons.Material.Outlined.Edit" Size="MudBlazor.Size.Small" />
                }
            </CellTemplate>
        </TemplateColumn>

    </Columns>

</MudDataGrid>

@code {
    #region Parameters

    [CascadingParameter]
    public required Organization Organization { get; set; }

    #endregion

    #region Private fields

    private MudDataGrid<Category> _dataGrid = null!;

    #endregion

    private async Task<GridData<Category>> Load(GridState<Category> state)
    {

        var scope = ScopeFactory.CreateScope();
        var service = scope.ServiceProvider.GetRequiredService<ICategoryManager>();

        var categories = await service.List(1, int.MaxValue, new CategoryFilters { Discriminator = Organization.Id });

        return new GridData<Category>
        {
            TotalItems = categories.Count,
            Items = categories
        };
    }

    private async Task CreateCategory()
    {

    }

    private async Task EditCategory(Category category)
    {
        
    }
}
