@using Alma.Modules.Workflows.Components.Pages.Activities.Dialogs
@using Alma.Workflows.Core.CustomActivities.Entities
@using Alma.Workflows.Core.CustomActivities.Models
@using Alma.Workflows.Core.CustomActivities.Services
@using Microsoft.Extensions.DependencyInjection
@using EnumsNET;

@inject NavigationManager NavigationManager
@inject IServiceScopeFactory ScopeFactory
@inject IDialogService DialogService
@inject ISnackbar Snackbar


<MudDataGrid @ref="_dataGrid" T="CustomActivityParameterTemplate" ServerData="LoadParameters" Elevation="0" Hover="true" Style="width: 100%;">

    <ToolBarContent>
        <MudText Typo="Typo.h6">Parâmetros</MudText>
        <MudSpacer></MudSpacer>
        <MudButton OnClick="CreateParameter" Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.Add" Color="Color.Primary">Criar</MudButton>
    </ToolBarContent>

    <Columns>
        <PropertyColumn Title="Nome" Property="x => x.Name" HeaderStyle="width: 150px;" />
        <PropertyColumn Title="Nome de exibição" Property="x => x.DisplayName" HeaderStyle="width: 200px;" />
        <PropertyColumn Title="Tipo" Property="x => x.Type.AsString(EnumFormat.Description)" HeaderStyle="width: 100px;" />
            
        <TemplateColumn HeaderStyle="width: 60px;">
            <CellTemplate>
                <MudIconButton OnClick="@(() => EditParameter(context.Item.Id))" Icon="@Icons.Material.Outlined.Edit" Size="MudBlazor.Size.Small" />
                <MudIconButton OnClick="@(() => RemoveParameter(context.Item.Id))" Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" Size="MudBlazor.Size.Small" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>

    <NoRecordsContent>Nenhum parâmetro criado.</NoRecordsContent>

</MudDataGrid>

@code {
    #region Parameters

    [Parameter]
    public required string Id { get; set; }

    [Parameter]
    public required string OrganizationId { get; set; }

    #endregion

    #region Private fields

    bool _isLoading = true;
    bool _isSaving = false;

    FluentValidationValidator? _validator;
    CustomActivityEditModel _model = null!;
    CustomActivityTemplate _entity = null!;
    private MudDataGrid<CustomActivityParameterTemplate> _dataGrid = null!;

    #endregion

    private async Task Load()
    {
        if (string.IsNullOrEmpty(Id))
        {
            await DialogService.ShowErrorDialog("Não foi possível carregar os dados da atividade personalizada", "Parâmetro ID não informado.");
            return;
        }

        _isLoading = true;
        StateHasChanged();

        var scope = ScopeFactory.CreateScope();
        var customActivityManager = scope.ServiceProvider.GetRequiredService<ICustomActivityManager>();

        try
        {
            var customActivity = await customActivityManager.FindById(Id, OrganizationId);

            if (customActivity is null)
            {
                await DialogService.ShowErrorDialog("Não foi possível carregar os dados da atividade personalizada", "Atividade personalizada não encontrada.");
                return;
            }

            _entity = customActivity;

            _model = new CustomActivityEditModel
            {
                Id = _entity.Id,
                Discriminator = _entity.Discriminator,
                Name = _entity.Name,
                Description = _entity.Description,
                CategoryId = _entity.CategoryId,
                Parameters = _entity.Parameters.Select(s =>
                    new CustomActivityParameterEditModel
                    {
                        CustomActivityId = _entity.Id,
                        CustomActivityDiscriminator = _entity.Discriminator,
                        Id = s.Id,
                        Name = s.Name,
                        DisplayName = s.DisplayName,
                        Description = s.Description,
                        Type = s.Type
                    }
                ).ToList()
            };
        }
        catch (Exception ex)
        {

            await DialogService.ShowErrorDialog("Erro ao carregar dados da atividade personalizada.", ex.Message);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task<GridData<CustomActivityParameterTemplate>> LoadParameters(GridState<CustomActivityParameterTemplate> state)
    {
        await Load();

        if (_entity is null)
        {
            Snackbar.AddError("Não foi possível carregar os dados da atividade personalizada");
            NavigationManager.NavigateTo("/Workflows/activities");

            return new GridData<CustomActivityParameterTemplate>
            {
                TotalItems = 0,
                Items = new List<CustomActivityParameterTemplate>()
            };
        }

        return new GridData<CustomActivityParameterTemplate>
        {
            TotalItems = _entity.Parameters.Count,
            Items = _entity.Parameters
        };

    }

    private async Task CreateParameter()
    {
        var parameters = new DialogParameters<CustomActivityCreateParameterDialog>
        {
            { x => x.CustomActivity, _entity },
            { x => x.Id, null }
        };

        var dialog = await DialogService.ShowAsync<CustomActivityCreateParameterDialog>("Add Parameter", parameters);
        var result = await dialog.Result;

        if (result == null || result.Canceled)
            return;

        await _dataGrid.ReloadServerData();
    }

    private async Task EditParameter(string id)
    {
        var parameters = new DialogParameters<CustomActivityCreateParameterDialog>
        {
            { x => x.CustomActivity, _entity },
            { x => x.Id, id }
        };

        var dialog = await DialogService.ShowAsync<CustomActivityCreateParameterDialog>("Edit Parameter", parameters);
        var result = await dialog.Result;

        if (result == null || result.Canceled)
            return;

        await _dataGrid.ReloadServerData();
    }

    private async Task RemoveParameter(string id)
    {
        var parameter = _model.Parameters.FirstOrDefault(x => x.Id == id);

        if (parameter is null)
        {
            Snackbar.AddError("Parâmetro não encontrado.");
            return;
        }

        var result = await DialogService.ShowDeleteConfirmationDialog($"Você tem certeza que deseja remover o parâmetro '{parameter.DisplayName}'?");

        if (result == null || result.Canceled)
            return;

        var scope = ScopeFactory.CreateScope();
        var customActivityManager = scope.ServiceProvider.GetRequiredService<ICustomActivityManager>();

        try
        {
            await customActivityManager.RemoveParameter(_entity.Id, _entity.Discriminator, parameter.Id);
        }
        catch (Exception ex)
        {
            await DialogService.ShowErrorDialog("Erro ao tentar excluir o parâmetro.", ex.Message);
        }
        finally
        {
            await _dataGrid.ReloadServerData();
        }
    }
}
