@using Alma.Workflows
@using Alma.Workflows.Definitions
@using Alma.Workflows.Design
@using Microsoft.Extensions.DependencyInjection

@inject IServiceScopeFactory ScopeFactory
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudDialog Class="mud-height-full">
    <DialogContent>
        <MudStack Class="mud-width-full mud-height-full overflow-hidden relative">
            <FlowDesign Definition="Definition" Options="_options" OnSave="Save" OnPublish="Publish"/>
        </MudStack>
    </DialogContent>
</MudDialog>

@code {

    #region Parameters

    [CascadingParameter]
    public IMudDialogInstance Dialog { get; set; } = null!;

    [Parameter]
    public Organization Organization { get; set; } = null!;

    [Parameter]
    public FlowDefinition Definition { get; set; } = null!;

    #endregion

    private FlowDesignOptions _options = new FlowDesignOptions
    {
        Namespaces = new[] { "Alma.Workflows" }
    };

    private async Task Save(FlowDefinition definition)
    {
        using var scope = ScopeFactory.CreateScope();
        var manager = scope.ServiceProvider.GetRequiredService<IFlowManager>();

        await manager.UpdateDefinition(definition);
    }

    private async Task Publish(FlowDefinition definition)
    {
        await Save(definition);

        var dialogOptions = new DialogOptions
        {
            FullWidth = true,
            MaxWidth = MaxWidth.Medium,
            CloseButton = true,
            CloseOnEscapeKey = true,
        };

        var parameters = new DialogParameters<DefinitionFlowPublishDialog>
        {
            {x => x.Organization, Organization},
            {x => x.Definition, Definition}
        };

        var dialog = await DialogService.ShowAsync<DefinitionFlowPublishDialog>("Publicar versão", parameters, dialogOptions);
    }
}
