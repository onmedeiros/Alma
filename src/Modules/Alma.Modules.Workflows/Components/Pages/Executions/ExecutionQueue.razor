@using Alma.Modules.Workflows.Components.Shared
@using Alma.Workflows.Core.Abstractions
@using Alma.Workflows.Runners
@using Alma.Workflows.States

<MudCard Outlined Class="rounded-lg">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Fila de atividades</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudStack>
            <MudText Typo="Typo.body2"><b>Pendentes</b></MudText>
            @if (Runner.PendingExecutions.Any())
            {

                foreach (var execution in Runner.PendingExecutions)
                {
                    var isActive = execution.QueueItem.Sequential == CurrentQueueItemSequential;

                    <MudCard Elevation="8">
                        <MudCardContent>
                            <MudStack Row AlignItems="AlignItems.Center" Spacing="0">
                                @if(isActive)
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Forward" Color="Color.Primary" Class="mr-1" Size="Size.Small" />
                                    <MudText Typo="Typo.body2">@execution.QueueItem.Activity.DisplayName</MudText>
                                }
                                else
                                {
                                    <MudButton Size="Size.Small" OnClick="@(() => SelectQueueItem(execution.QueueItem))"><MudText Typo="Typo.body2">@execution.QueueItem.Activity.DisplayName</MudText></MudButton>
                                }
                                <MudSpacer />
                                <ActivityExecutionStatusChip Status="@execution.QueueItem.ExecutionStatus" />
                            </MudStack>
                        </MudCardContent>
                    </MudCard>
                }
            }
            else
            {
                <MudText Typo="Typo.body2" Class="mud-text-secondary">Nenhuma execução pendente.</MudText>
            }

            <MudDivider Class="mt-4"/>

            @if (Runner.GetCompletedQueueItems(true).Any())
            {
                <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mt-3">
                    <MudText Typo="Typo.body2" ><b>Completadas</b></MudText>
                    <MudSwitch @bind-Value="_showAutomaticExecutions" Label="Mostrar automáticas" Size="Size.Small" Color="Color.Primary" />
                </MudStack>

                

                foreach (var item in Runner.GetCompletedQueueItems(_showAutomaticExecutions))
                {
                    var activity = GetActivity(item.ActivityId);
                    var isActive = item.Sequential == CurrentQueueItemSequential;
                    var isAutomaticExecution = !item.Activity.Descriptor.RequireInteraction;

                    <MudCard Elevation="8" Style="opacity: 0.5;">
                        <MudCardContent>
                            <MudStack Row AlignItems="AlignItems.Center" Spacing="0">
                                @if (isActive)
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Forward" Color="Color.Primary" Class="mr-1" Size="Size.Small" />
                                    <MudText Typo="Typo.body2">@activity.DisplayName</MudText>
                                    @if (isAutomaticExecution)
                                    {
                                        <MudChip T="string" Size="Size.Small">Automática</MudChip>
                                    }
                                }
                                else
                                {
                                    <MudButton Size="Size.Small" OnClick="@(() => SelectQueueItem(item))"><MudText Typo="Typo.body2">@activity.DisplayName</MudText></MudButton>
                                    @if (isAutomaticExecution)
                                    {
                                        <MudChip T="string" Size="Size.Small">Automática</MudChip>
                                    }
                                }
                            </MudStack>
                        </MudCardContent>
                    </MudCard>
                }
            }
        </MudStack>
    </MudCardContent>
</MudCard>

@code {
    [Parameter]
    public FlowRunnerV2 Runner { get; set; } = default!;

    [Parameter]
    public int? CurrentQueueItemSequential { get; set; }

    [Parameter]
    public EventCallback<QueueItem> OnQueueItemSelected { get; set; }

    private bool _showAutomaticExecutions = false;

    protected override void OnParametersSet()
    {

    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (!Runner.GetCompletedQueueItems().Any())
            {
                _showAutomaticExecutions = true;
                StateHasChanged();
            }
        }
    }

    private IActivity GetActivity(string activityId)
    {
        return Runner.Context.Flow.Activities.First(a => a.Id == activityId);
    }

    private void SelectQueueItem(QueueItem item)
    {
        OnQueueItemSelected.InvokeAsync(item);
    }
}
