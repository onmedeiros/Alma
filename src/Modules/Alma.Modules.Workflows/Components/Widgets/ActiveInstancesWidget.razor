@using Alma.Workflows.Core.Instances.Services
@using Alma.Workflows.Core.Instances.Stores
@using Microsoft.Extensions.DependencyInjection

@inject IServiceScopeFactory ScopeFactory

<MudStack Row="true" Justify="Justify.FlexEnd">
	<span style="font-size: 40px; color: var(--mud-palette-success-darken)">@_activeInstancesCount</span>
</MudStack>

@code {
	[CascadingParameter]
	public required Organization Organization { get; set; }

	private bool _isLoading = true;
	private int _activeInstancesCount = 0;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await Load();
			_isLoading = false;
			StateHasChanged();
		}
	}

	private async ValueTask Load()
	{
		using var scope = ScopeFactory.CreateScope();
		var instanceManager = scope.ServiceProvider.GetRequiredService<IInstanceManager>();

		_activeInstancesCount = await instanceManager.GetCount(new FlowInstanceFilters { 
			Discriminator = Organization.Id,
			IsActive = true 
		});
	}
}
