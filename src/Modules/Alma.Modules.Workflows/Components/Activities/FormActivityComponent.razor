@using Alma.Modules.Workflows.Components.Shared.Activities
@using Alma.Modules.Workflows.Models.Activities
@using Alma.Workflows.Activities.Interaction
@using Alma.Workflows.Core.Abstractions
@using Alma.Workflows.Core.Activities.Base
@using Alma.Workflows.Core.Contexts
@using Alma.Workflows.Enums

@if (_activity is null)
{
    <MudAlert Severity="Severity.Error">Erro ao carregar atividade.</MudAlert>
}
else
{
    <MudStack>
        <MudText Typo="Typo.body2"><b>Preencha o formulário</b></MudText>
        @if (_activity.Fields?.GetValue(ActivityExecutionContext)?.Count > 0)
        {
            <CascadingValue Value="_formState">
                @foreach (var field in _activity.Fields.GetValue(ActivityExecutionContext))
                {
                    switch (field.Type)
                    {
                        case Alma.Workflows.Enums.FieldType.Text:
                            <TextFormField Field="field" Disabled="IsReadOnly()" />
                            break;
                    }
                }
            </CascadingValue>
        }
    </MudStack>
}

@code {
    [Parameter]
    public IActivity Activity { get; set; } = default!;

    [Parameter]
    public ActivityExecutionContext ActivityExecutionContext { get; set; } = null!;

    [Parameter]
    public ActivityExecutionStatus? ActivityExecutionStatus { get; set; }

    [Parameter]
    public EventCallback<IActivity> ActivityChanged { get; set; }

    private FormActivity? _activity;
    private readonly FormState _formState = new FormState();

    protected override void OnParametersSet()
    {
        if (Activity is not FormActivity activity)
            throw new ArgumentException("Activity must be of type FormActivity");

        _activity = activity;

        if (_activity.FormState is not null && _activity.FormState.Value is not null)
        {
            _formState.SetState(_activity.FormState.Value);
        }
        else
        {
            _activity.FormState = new Data<Dictionary<string, object?>>
            {
                Value = _formState.GetState()
            };
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _formState.OnStateChanged += StateChanged;
        }
    }

    private bool IsReadOnly()
    {
        if (ActivityExecutionStatus is not null 
            && ActivityExecutionStatus.Value == Alma.Workflows.Enums.ActivityExecutionStatus.Completed)
        {
            return true;
        }

        return false;
    }

    private void StateChanged()
    {
        ActivityChanged.InvokeAsync(_activity);
        StateHasChanged();
    }
}