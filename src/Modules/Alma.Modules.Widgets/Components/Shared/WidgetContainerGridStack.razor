@using Alma.Modules.Dashboards.Interop
@using Alma.Modules.Widgets.Entities
@using Alma.Modules.Widgets.Interop
@using Alma.Modules.Widgets.Services
@using Alma.Organizations.Entities
@using Microsoft.Extensions.DependencyInjection

@inject IGridstackInterop GridStack;
@inject IWidgetRegistry Registry
@inject IServiceScopeFactory ScopeFactory

<WidgetSelector @bind-Open="_isWidgetSelectorOpen" Container="@Name">

</WidgetSelector>

<MudStack Row="true" Justify="_isEditMode? Justify.SpaceBetween: Justify.FlexEnd" Class="mb-2" AlignItems="AlignItems.Center">

	@if (!_isEditMode)
	{
		<MudTooltip Text="Entrar no modo edição">
			<MudIconButton Icon="@Icons.Material.Outlined.Edit" OnClick="EnterEditMode"/>
		</MudTooltip>
	}
	else
	{
		<MudStack Row="true">
			<MudTooltip Text="Salvar">
				<MudIconButton Icon="@Icons.Material.Outlined.Save" Color="Color.Primary" OnClick="Save" />
			</MudTooltip>

			<MudTooltip Text="Adicionar widgets">
				<MudIconButton Icon="@Icons.Material.Outlined.Widgets" OnClick="OpenWidgetSelector" />
			</MudTooltip>
		</MudStack>

		<MudStack Row="true">
			<MudTooltip Text="Cancelar edição">
				<MudIconButton Class="ms-4" Icon="@Icons.Material.Outlined.Cancel" Color="Color.Error" OnClick="CancelEdit" />
			</MudTooltip>
		</MudStack>
	}

</MudStack>
<div class="grid-stack rounded">

	@foreach (var widget in _containerWidgets)
	{
		<WidgetComponent @key="widget.Id" Widget="widget" IsEditMode="_isEditMode" OnRemoveClick="HandleRemoveClick"> </WidgetComponent>
	}
</div>

@code {
	[CascadingParameter]
	public Organization Organization { get; set; } = default!;

	[Parameter]
	public required string Name { get; set; }

	private List<Widget> _containerWidgets = [];
	private List<string> _makedWidgets = [];
	private List<string> _addedWidgets = [];
	private List<string> _removedWidgets = [];

	private int x = 0;
	private int y = 0;
	private int w = 1;
	private int h = 2;

	private bool _isEditMode = false;
	private bool _isWidgetSelectorOpen = false;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			// Configure events
			GridStack.OnAdded += HandleAdded;
			GridStack.OnChanged += HandleChanged;
			GridStack.OnRemoved += HandleRemoved;

			// Initialize GridStack
			await GridStack.InitializeAsync(new Interop.GridstackInteropOptions
			{
				AcceptWidgets = true,
			});

			// Load widgets
			await LoadWidgets();

			StateHasChanged();
		}
		else
		{
			// When re-rendered, remake remaining widgets on gridstack
			await RemakeWidgets();
		}
	}

	private async Task LoadWidgets()
	{
		using var scope = ScopeFactory.CreateScope();
		var widgetService = scope.ServiceProvider.GetRequiredService<IWidgetService>();

		var containerWidgets = await widgetService.GetByContainer(Name, Organization.Id);
		_containerWidgets = containerWidgets.ToList();
	}

	private async Task EnterEditMode()
	{
		await GridStack.SetStatic(false);
		_isEditMode = true;
	}

	private async Task ExitEditMode()
	{
		await GridStack.SetStatic(true);
		_isEditMode = false;
	}

	private async Task CancelEdit()
	{
		await GridStack.SetStatic(true);
		_isEditMode = false;
	}

	private void OpenWidgetSelector()
	{
		_isWidgetSelectorOpen = true;
	}

	private async Task RemakeWidgets()
	{
		foreach(var widget in _containerWidgets)
		{
			if (_makedWidgets.Contains(widget.Id))
				continue;

			await GridStack.MakeWidget(widget.Id);
			_makedWidgets.Add(widget.Id);
		}
	}

	private async Task HandleAdded(GridStackInteropEventArgs args)
	{
		foreach (var widget in args.Widgets)
		{
			var newWidget = new Widget
			{
				OrganizationId = Organization.Id,
				Container = Name,
				Type = widget.Type ?? throw new InvalidOperationException("Invalid widget."),
				X = widget.X,
				Y = widget.Y,
				Width = widget.W,
				Height = widget.H,
			};

			_containerWidgets.Add(newWidget);
			_addedWidgets.Add(newWidget.Id);
		}

		StateHasChanged();
	}

	private async Task HandleChanged(GridStackInteropEventArgs args)
	{
		foreach (var widget in args.Widgets)
		{
			var existingWidget = _containerWidgets.FirstOrDefault(w => w.Id == widget.Id?.Replace("id-", ""));

			if (existingWidget is not null)
			{
				existingWidget.X = widget.X;
				existingWidget.Y = widget.Y;
				existingWidget.Width = widget.W;
				existingWidget.Height = widget.H;
			}
		}

		StateHasChanged();
	}

	private async Task HandleRemoved(GridStackInteropEventArgs args)
	{
		foreach (var widget in args.Widgets)
		{
			var existingWidget = _containerWidgets.FirstOrDefault(w => w.Id == widget.Id?.Replace("id-", ""));
			if (existingWidget is not null)
			{
				_containerWidgets.Remove(existingWidget);
				_removedWidgets.Add(existingWidget.Id);
			}
		}

		StateHasChanged();
	}

	private async Task HandleRemoveClick(Widget widget)
	{

		_containerWidgets.Remove(widget);
		_removedWidgets.Add(widget.Id);

		StateHasChanged();
	}

	private async Task Save()
	{
		using var scope = ScopeFactory.CreateScope();
		var widgetService = scope.ServiceProvider.GetRequiredService<IWidgetService>();

		foreach (var widget in _containerWidgets)
		{
			if (_addedWidgets.Contains(widget.Id))
			{
				await widgetService.Create(widget);
			}
			else
			{
				await widgetService.Update(widget);
			}

		}

		foreach (var widgetId in _removedWidgets)
		{
			await widgetService.Delete(widgetId, Organization.Id);
		}

		_addedWidgets.Clear();
		_removedWidgets.Clear();

		await ExitEditMode();

		StateHasChanged();
	}
}
